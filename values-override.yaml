#
# Global
#
global:
  veleroNamespace: velero
  # kubernetesClusterDomain: my-cluster

#
# API Config
#
apiConfig:
  #
  awsAccessKeyId: <awsAccessKeyId>
  awsSecretAccessKey: <awsSecretAccessKey>
  # debugLevel: debug
  veleroCliVersion: v1.12.2
  # apiTokenExpirationMin: "30"
  # apiTokenRefreshExpirationDays: "7"
  storage:
    enabled: false
    storageClassName: <your-storage-class-name>

#
# You can use nodeport or ingress according to your needs
#
#
# Nodeport
#
uiNp:
  enabled: false
  ip: "10.10.0.100"  # any ip address of your cluster
  apiPort: "30001"
  uiPort: "30002"
#
# Ingress
#
uiIngress:
  enabled: false
  # ingressClassName: nginx
  host: velero.<your-domain>
  tls:
    enabled: false
  # metadata:
  #   annotations:
  #     cert-manager.io/cluster-issuer: "letsencrypt-prod" 
  # spec:
  #   tls:
  #    - hosts:
  #      - velero-ui.domain.com
  #      secretName: velero-ui-tls

#
# Watchdog Cron
#
report:
  schedule: 0 8 * * *

#
# Watchdog Daemon
#
watchdogConfig:
  # config
  k8SInclusterMode: "True"
  # k8sVeleroNamespace: "velero"
  processClusterName: <your-cluster-name>
  # processCycleSec: 300
  # expiresDaysWarning: 29
  notificationSkipCompleted: "False"
  # notificationSkipInProgress: "True"
  # notificationSkipRemoved: "True"
  # notificationSkipDeleting: "True"
   
  # email
  emailEnable: "False"
  emailAccount: <your-email>
  emailPassword: <your-password>
  emailRecipients: <email-recipents-comma-saparted>
  emailSmtpPort: <smtp-port>
  emailSmtpServer: <smtp-server>
  
  # slack
  slackEnable: "False"
  slackChannel: <channel-id>  
  slackToken: <token>
  
  # telegram
  telegramEnable: "False"
  telegramChatId: "<telegram-chat-id>"
  telegramToken: "<telegram-token>"
