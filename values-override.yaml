global:
  veleroNamespace: velero

apiConfig:
  securityTokenKey: <security token key get from "openssl rand -hex 32">
  awsAccessKeyId: <awsAccessKeyId>
  awsSecretAccessKey: <awsSecretAccessKey>
  veleroCliVersion: v1.12.2

### set specific tag image

#api:
#  apiServer:
#    image:
#      tag: 0.1.7
#    imagePullPolicy: IfNotPresent
#ui:
#  webserver:
#    image:
#      tag: 0.1.7
#    imagePullPolicy: IfNotPresent

#
# port configuration
# you can use nodeport or ingress according to your needs
#

### use nodeport

apiNp:
  enabled: false

uiNp:
  enabled: false

# uncomment and set if you use nodeport
#uiConfig:
#  nextPublicVeleroApiUrl: "http://<cluster node ip>:30001"
#  nextPublicVeleroApiWs: "ws://<cluster node ip>:30001"

### use ingress

apiIngress:
  enabled: false
  host: api.velero.<your-domain>
uiIngress:
  enabled: false
  host: velero.<your-domain>

# uncomment and set if you use ingress
#uiConfig:
#  nextPublicVeleroApiUrl: "https://api.velero.<your-domain>"
#  nextPublicVeleroApiWs: "wss://api.velero.<your-domain>"

### watchdog 

# cron for full report
report:
  schedule: 0 8 * * *
  veleroWatchdogReport:
    image:
      tag: dev
    imagePullPolicy: IfNotPresent
# watchdog for alarm
watchdog:
  veleroMonitoring:
    image:
      tag: dev
    imagePullPolicy: IfNotPresent
watchdogConfig:
  processClusterName: your-cluster-name
  # processCycleSec: 120
  # expiresDaysWarning: 29
  emailEnable: "False"
  emailAccount: <your-email>
  emailPassword: <your-password>
  emailRecipients: <email-recipents-comma-saparted>
  emailSmtpPort: <smtp-port>
  emailSmtpServer: <smtp-server>
  telegramEnable: "False"
  telegramChatId: "<telegram-chat-id>"
  telegramToken: "<telegram-token>"